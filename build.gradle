plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'etri'
version = '0.0.1'

sourceCompatibility = '17'
targetCompatibility = '17'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

ext {
	logback_version = '1.3.14'
	lombok_version = '1.18.32'
	
//	okhttp_version = '4.12.0'
//	jsonpath_version = '2.9.0'
//	picocli_version = '3.9.6'
//	docker_java_version = '3.0.14'
	
	aas4j_version = '1.0.0'

	spring_boot_version = '3.2.4'

//	httpcore_version = '4.4.16'
//	httpclient_version = '4.5.14'
	
//	postgresql_version = '42.3.3'
}

dependencies {
	implementation project(":utils")
	implementation project(":mdt.common")
	
	// Logback with SLF4j
	implementation "ch.qos.logback:logback-classic:${logback_version}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor 'org.projectlombok:lombok'


	// AAS model
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-json:${aas4j_version}"

	// Spring boot
	implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
	testImplementation "org.springframework.boot:spring-boot-starter-test:${spring_boot_version}"

	
//	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: "${okhttp_version}"
//	implementation group: 'com.jayway.jsonpath', name: 'json-path', version: "${jsonpath_version}"
	
	// Postgresql
//	implementation "org.postgresql:postgresql:${postgresql_version}"

	// Kubernetes client
//	implementation 'io.fabric8:kubernetes-client:6.9.2'
	
	// command line parser
//	implementation "info.picocli:picocli:${picocli_version}"
	
	// Docker Java Binding
//	implementation "com.github.docker-java:docker-java:${docker_java_version}"
	
//	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-aasx:${aas4j_version}"
	
//	implementation "org.apache.httpcomponents:httpcore:${httpcore_version}"
//	implementation "org.apache.httpcomponents:httpclient:${httpclient_version}"
	
//	implementation fileTree(dir: 'lib', include: '*.jar')
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

shadowJar {
	classifier 'all'
	
	zip64 true
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

tasks.named('test') {
	useJUnitPlatform()
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}